<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <generator uri="https://blog.rust-lang.org/" version="0.1.0">Rust Blog</generator>
    <link href="https://blog.rust-lang.org/feed.xml" rel="self" type="application/atom+xml" />
    <link href="https://blog.rust-lang.org/" rel="alternate" type="text/html" />
    <id>https://blog.rust-lang.org/</id>
    <title>Rust Blog</title>
    <subtitle>Empowering everyone to build reliable and efficient software.</subtitle>
    <author>
        <name>Maintained by the Rust Teams.</name>
        <uri>https://github.com/rust-lang/blog.rust-lang.org/</uri>
    </author>
    <updated>2022-08-11T11:59:34+00:00</updated>

    
    <entry>
        <title>Non-lexical lifetimes (NLL) fully stable</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2022/08/05/nll-by-default.html" type="text/html" title="Non-lexical lifetimes (NLL) fully stable" />
        <published>2022-08-05T00:00:00+00:00</published>
        <updated>2022-08-05T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2022/08/05/nll-by-default.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2022/08/05/nll-by-default.html">&lt;p&gt;As of Rust 1.63 (releasing next week), the &amp;quot;non-lexical lifetimes&amp;quot; (NLL) work will be enabled by default. NLL is the second iteration of Rust&#x27;s borrow checker. The &lt;a href&#x3D;&quot;https://rust-lang.github.io/rfcs/2094-nll.html&quot;&gt;RFC&lt;/a&gt; actually does quite a nice job of highlighting some of the motivating examples. &amp;quot;But,&amp;quot; I hear you saying, &amp;quot;wasn&#x27;t NLL included in &lt;a href&#x3D;&quot;https://blog.rust-lang.org/2018/12/06/Rust-1.31-and-rust-2018.html&quot;&gt;Rust 2018&lt;/a&gt;?&amp;quot; And yes, yes it was! But at that time, NLL was only enabled for Rust 2018 code, while Rust 2015 code ran in &amp;quot;migration mode&amp;quot;. When in &amp;quot;migration mode,&amp;quot; the compiler would run both the old &lt;em&gt;and&lt;/em&gt; the new borrow checker and compare the results. This way, we could give warnings for older code that should never have compiled in the first place; we could also limit the impact of any bugs in the new code. Over time, we have limited migration mode to be closer and closer to just running the new-style borrow checker: in the next release, that process completes, and all Rust code will be checked with NLL.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#how-does-removing-the-old-borrow-checker-affect-users&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;how-does-removing-the-old-borrow-checker-affect-users&quot;&gt;&lt;/a&gt;How does removing the old borrow checker affect users?&lt;/h2&gt;
&lt;p&gt;At this point, we have almost completely merged &amp;quot;migration mode&amp;quot; and &amp;quot;regular mode&amp;quot;, so switching to NLL will have very little impact on the user experience. A number of diagnostics changed, mostly for the better -- &lt;a href&#x3D;&quot;https://jackh726.github.io/rust/2022/06/10/nll-stabilization.html&quot;&gt;Jack Huey gives the full details in his blog post&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#credit-where-credit-is-due&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;credit-where-credit-is-due&quot;&gt;&lt;/a&gt;Credit where credit is due&lt;/h2&gt;
&lt;p&gt;The work to remove the old borrow checker has been going on for years. It&#x27;s been a long, tedious, and largely thankless process. We&#x27;d like to take a moment to highlight the various people involved and make sure they are recognized for their hard work:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/jackh726/&quot;&gt;Jack Huey&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/sponsors/jackh726&quot;&gt;sponsorship page&lt;/a&gt;), for driving the final details of stabilization (diagnostics, reconciling differences in behavior).&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/marmeladema&quot;&gt;Élie Roudninski&lt;/a&gt;, for refactoring the diagnostics code and doing the painstaking work (along with Jack) of checking each regressed case, one by one.&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/Aaron1011&quot;&gt;Aaron Hill&lt;/a&gt;, for numerous improvements to bring NLL diagnostics up to par.&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/matthewjasper&quot;&gt;Matthew Jasper&lt;/a&gt;, for reconciling errors around higher-ranked lifetimes and other core diagnostics improvements.&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/lqd&quot;&gt;Rémy Rakic&lt;/a&gt;, for rebasing Matthew&#x27;s PR as well as doing other independent diagnostics work.&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/chrisvittal&quot;&gt;Christopher Vittal&lt;/a&gt;, for removing &amp;quot;compare&amp;quot; mode (don&#x27;t ask).&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/centril&quot;&gt;Centril&lt;/a&gt;, for doing a lot of early work reconciling migration mode and the regular mode.&lt;/li&gt;
&lt;li&gt;And of course the members of the NLL working group (myself, &lt;a href&#x3D;&quot;https://github.com/pnkfelix&quot;&gt;Felix Klock&lt;/a&gt;, &lt;a href&#x3D;&quot;https://github.com/spastorino&quot;&gt;Santiago Pastorino&lt;/a&gt; (&lt;a href&#x3D;&quot;https://github.com/sponsors/spastorino&quot;&gt;sponsorship page&lt;/a&gt;), &lt;a href&#x3D;&quot;https://github.com/matthewjasper&quot;&gt;Matthew Jasper&lt;/a&gt;, &lt;a href&#x3D;&quot;https://github.com/davidtwco&quot;&gt;David Wood&lt;/a&gt;, &lt;a href&#x3D;&quot;https://github.com/lqd&quot;&gt;Rémy Rakic&lt;/a&gt;, &lt;a href&#x3D;&quot;https://github.com/nashenas88&quot;&gt;Paul Daniel Faria&lt;/a&gt;, &lt;a href&#x3D;&quot;https://github.com/nnethercote&quot;&gt;Nick Nethercote&lt;/a&gt;) who delivered the feature in the first place.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Jack&#x27;s blog post includes a &lt;a href&#x3D;&quot;https://jackh726.github.io/rust/2022/06/10/nll-stabilization.html#how-did-we-get-here&quot;&gt;detailed narrative&lt;/a&gt; of all the work involved if you&#x27;d like more details! It&#x27;s a fun read.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#looking-forward-what-can-we-expect-for-the-borrow-checker-of-the-future&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;looking-forward-what-can-we-expect-for-the-borrow-checker-of-the-future&quot;&gt;&lt;/a&gt;Looking forward: what can we expect for the &amp;quot;borrow checker of the future&amp;quot;?&lt;/h2&gt;
&lt;p&gt;The next frontier for Rust borrow checking is taking the &lt;a href&#x3D;&quot;https://github.com/rust-lang/polonius&quot;&gt;polonius&lt;/a&gt; project and moving it from research experiment to production code. Polonius is a next-generation version of the borrow checker that was &amp;quot;spun off&amp;quot; from the main NLL effort in 2018, as we were getting NLL ready to ship in production. Its most important contribution is fixing a known limitation of the borrow checker, demonstrated by the following example:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-rust&quot;&gt;fn last_or_push&amp;lt;&#x27;a&amp;gt;(vec: &amp;amp;&#x27;a mut Vec&amp;lt;String&amp;gt;) -&amp;gt; &amp;amp;&#x27;a String {
    if let Some(s) &#x3D; vec.last() { // borrows vec
        // returning s here forces vec to be borrowed
        // for the rest of the function, even though it
        // shouldn&#x27;t have to be
        return s; 
    }
    
    // Because vec is borrowed, this call to vec.push gives
    // an error!
    vec.push(&amp;quot;&amp;quot;.to_string()); // ERROR
    vec.last().unwrap()
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This example doesn&#x27;t compile today (&lt;a href&#x3D;&quot;https://play.rust-lang.org/?version&#x3D;stable&amp;amp;mode&#x3D;debug&amp;amp;edition&#x3D;2021&amp;amp;gist&#x3D;517ac32f0aab076faa32b9065783bbb4&quot;&gt;try it for yourself&lt;/a&gt;), though there&#x27;s not a good reason for that. You can often workaround the problem by editing the code to introduce a redundant if (&lt;a href&#x3D;&quot;https://play.rust-lang.org/?version&#x3D;stable&amp;amp;mode&#x3D;debug&amp;amp;edition&#x3D;2021&amp;amp;gist&#x3D;d9b25963e83201902ecf5c02d79cbc13&quot;&gt;as shown in this example&lt;/a&gt;), but with polonius, it will compile as is. If you&#x27;d like to learn more about how polonius (and the existing borrow checker) works&lt;sup class&#x3D;&quot;footnote-ref&quot;&gt;&lt;a href&#x3D;&quot;#fn1&quot; id&#x3D;&quot;fnref1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, you can &lt;a href&#x3D;&quot;https://www.youtube.com/watch?v&#x3D;_agDeiWek8w&quot;&gt;watch my talk from Rust Belt Rust&lt;/a&gt;.&lt;/p&gt;
&lt;section class&#x3D;&quot;footnotes&quot;&gt;
&lt;ol&gt;
&lt;li id&#x3D;&quot;fn1&quot;&gt;
&lt;p&gt;Or where the name &amp;quot;polonius&amp;quot; comes from! &lt;a href&#x3D;&quot;#fnref1&quot; class&#x3D;&quot;footnote-backref&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>

        <author>
            <name>Niko Matsakis</name>
        </author>
    </entry>
    
    <entry>
        <title>Increasing the glibc and Linux kernel requirements</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2022/08/01/Increasing-glibc-kernel-requirements.html" type="text/html" title="Increasing the glibc and Linux kernel requirements" />
        <published>2022-08-01T00:00:00+00:00</published>
        <updated>2022-08-01T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2022/08/01/Increasing-glibc-kernel-requirements.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2022/08/01/Increasing-glibc-kernel-requirements.html">&lt;p&gt;The minimum requirements for Rust toolchains targeting Linux will &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/95026&quot;&gt;increase&lt;/a&gt; with the
Rust 1.64.0 release (slated for September 22nd, 2022). The new minimum requirements are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;glibc &amp;gt;&#x3D; 2.17 (previously glibc &amp;gt;&#x3D; 2.11)&lt;/li&gt;
&lt;li&gt;kernel &amp;gt;&#x3D; 3.2 (previously kernel &amp;gt;&#x3D; 2.6.32)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These requirements apply both to running the Rust compiler itself (and other Rust tooling like
Cargo or Rustup), and to running binaries produced by Rust, if they use the libstd.&lt;/p&gt;
&lt;p&gt;If you are not targeting an old long-term-support distribution, or embedded hardware running
an old Linux version, this change is unlikely to affect you. Otherwise, read on!&lt;/p&gt;
&lt;h1&gt;&lt;a href&#x3D;&quot;#affected-targets&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;affected-targets&quot;&gt;&lt;/a&gt;Affected targets&lt;/h1&gt;
&lt;p&gt;In principle, the new kernel requirements affect all &lt;code&gt;*-linux-*&lt;/code&gt; targets, while the glibc
requirements affect all &lt;code&gt;*-linux-gnu*&lt;/code&gt; targets. In practice, many targets were already requiring
newer kernel or glibc versions. The requirements for such targets do not change.&lt;/p&gt;
&lt;p&gt;Among targets for which a Rust host toolchain is distributed, the following &lt;em&gt;are&lt;/em&gt; affected:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;i686-unknown-linux-gnu&lt;/code&gt; (Tier 1)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x86_64-unknown-linux-gnu&lt;/code&gt; (Tier 1)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x86_64-unknown-linux-musl&lt;/code&gt; (Tier 2 with host tools)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;powerpc-unknown-linux-gnu&lt;/code&gt; (Tier 2 with host tools)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;powerpc64-unknown-linux-gnu&lt;/code&gt; (Tier 2 with host tools)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s390x-unknown-linux-gnu&lt;/code&gt; (Tier 2 with host tools)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following are &lt;em&gt;not&lt;/em&gt; affected, because they already had higher glibc/kernel requirements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;aarch64-unknown-linux-gnu&lt;/code&gt; (Tier 1)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aarch64-unknown-linux-musl&lt;/code&gt; (Tier 2 with host tools)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;arm-unknown-linux-gnueabi&lt;/code&gt; (Tier 2 with host tools)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;arm-unknown-linux-gnueabihf&lt;/code&gt; (Tier 2 with host tools)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;armv7-unknown-linux-gnueabihf&lt;/code&gt; (Tier 2 with host tools)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mips-unknown-linux-gnueabihf&lt;/code&gt; (Tier 2 with host tools)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;powerpc64le-unknown-linux-gnueabihf&lt;/code&gt; (Tier 2 with host tools)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;riscv64gc-unknown-linux-gnueabihf&lt;/code&gt; (Tier 2 with host tools)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For other tier 2 or tier 3 targets, for which no Rust toolchain is distributed, we do not
accurately track minimum requirements, and they may or may not be affected by this change.
&lt;code&gt;*-linux-musl*&lt;/code&gt; targets are only affected by the kernel requirements, not the glibc requirements.
Targets which only use libcore and not libstd are unaffected.&lt;/p&gt;
&lt;p&gt;A list of supported targets and their requirements can be found on the
&lt;a href&#x3D;&quot;https://doc.rust-lang.org/nightly/rustc/platform-support.html&quot;&gt;platform support page&lt;/a&gt;. However, the page is not yet up to date with the changes
announced here.&lt;/p&gt;
&lt;h1&gt;&lt;a href&#x3D;&quot;#affected-systems&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;affected-systems&quot;&gt;&lt;/a&gt;Affected systems&lt;/h1&gt;
&lt;p&gt;The glibc and kernel versions used for the new baseline requirements are already close to a decade
old. As such, this change should only affect users that either target old long-term-support Linux
distributions, or embedded hardware running old versions of Linux.&lt;/p&gt;
&lt;p&gt;The following Linux distributions &lt;em&gt;are&lt;/em&gt; still supported under the new requirements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RHEL 7 (glibc 2.17, kernel 3.10)&lt;/li&gt;
&lt;li&gt;SLES 12-SP5 (glibc 2.22, kernel 4.12.14)&lt;/li&gt;
&lt;li&gt;Debian 8 (glibc 2.19, kernel 3.16.7)&lt;/li&gt;
&lt;li&gt;Ubuntu 14.04 (glibc 2.19, kernel 3.13)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following distributions are &lt;em&gt;not&lt;/em&gt; supported under the new requirements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RHEL 6 (glibc 2.12, kernel 2.6.32)&lt;/li&gt;
&lt;li&gt;SLES 11-SP4 (glibc 2.11.3, kernel 3.0.101)&lt;/li&gt;
&lt;li&gt;Debian 6 (glibc 2.11, kernel 2.6.32), Debian 7 (glibc 2.13, kernel 3.2.41)&lt;/li&gt;
&lt;li&gt;Ubuntu 12.04 (glibc 2.15, kernel 3.2)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Out of the distributions in the second list, only RHEL 6 still has limited vendor support (ELS).&lt;/p&gt;
&lt;h1&gt;&lt;a href&#x3D;&quot;#why-increase-the-requirements&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;why-increase-the-requirements&quot;&gt;&lt;/a&gt;Why increase the requirements?&lt;/h1&gt;
&lt;p&gt;We want Rust, and binaries produced by Rust, to be as widely usable as possible. At the same time,
the Rust project only has limited resources to maintain compatibility with old environments.&lt;/p&gt;
&lt;p&gt;There are two parts to the toolchain requirements: The minimum requirements for running the Rust
compiler on a host system, and the minimum requirements for cross-compiled binaries.&lt;/p&gt;
&lt;p&gt;The minimum requirements for host toolchains affect our build system. Rust CI produces binary
artifacts for dozens of different targets. Creating binaries that support old glibc versions
requires either building on an operating system with old glibc (for native builds) or using a
buildroot with an old glibc version (for cross-compiled builds).&lt;/p&gt;
&lt;p&gt;At the same time, Rust relies on LLVM for optimization and code generation, which regularly
increases its toolchain requirements. LLVM 16 will require GCC 7.1 or newer (and LLVM 15 supports
GCC 5.1 in name only). Creating a build environment that has both a very old glibc and a recent
compiler becomes increasingly hard over time. crosstool-ng (which we use for most cross-compilation
needs) does not support targeting both glibc 2.11, and using a compiler that satisfies the new LLVM
requirements.&lt;/p&gt;
&lt;p&gt;The requirements for cross-compiled binaries have a different motivation: They affect which kernel
versions need to be supported by libstd. Increasing the kernel requirements allows libstd to use
newer syscalls, without having to maintain and test compatibility with kernels that do not support
them.&lt;/p&gt;
&lt;p&gt;The new baseline requirements were picked as the least common denominator among long-term-support
distributions that still have active support. This is currently RHEL 7 with glibc 2.17 and
kernel 3.10. The kernel requirement is picked as 3.2 instead, because this is the minimum
requirement of glibc itself, and there is little relevant API difference between these versions.&lt;/p&gt;
&lt;h1&gt;&lt;a href&#x3D;&quot;#what-should-i-do&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;what-should-i-do&quot;&gt;&lt;/a&gt;What should I do?&lt;/h1&gt;
&lt;p&gt;If you or your organization are affected by this change, there are a number of viable options
depending on your situation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Upgrade your target system, or raise the minimum requirements of your software, to satisfy the
new constraints.&lt;/li&gt;
&lt;li&gt;If you are running the Rust compiler on an old host, consider cross-compiling from a newer host
instead.&lt;/li&gt;
&lt;li&gt;If you are targeting an old glibc version, consider targeting musl instead.&lt;/li&gt;
&lt;li&gt;If you are targeting an old kernel version and use libstd, you may be out of luck: In this case
you may have to either freeze your current Rust version, or maintain a fork of libstd that
supports older kernels.&lt;/li&gt;
&lt;/ul&gt;
</content>

        <author>
            <name>Nikita Popov</name>
        </author>
    </entry>
    
    <entry>
        <title>Announcing Rust 1.62.1</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2022/07/19/Rust-1.62.1.html" type="text/html" title="Announcing Rust 1.62.1" />
        <published>2022-07-19T00:00:00+00:00</published>
        <updated>2022-07-19T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2022/07/19/Rust-1.62.1.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2022/07/19/Rust-1.62.1.html">&lt;p&gt;The Rust team has published a new point release of Rust, 1.62.1. Rust is a
programming language that is empowering everyone to build reliable and
efficient software.&lt;/p&gt;
&lt;p&gt;If you have a previous version of Rust installed via rustup, you can get 1.62.1 with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rustup update stable
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you don&#x27;t have it already, you can &lt;a href&#x3D;&quot;https://www.rust-lang.org/install.html&quot;&gt;get &lt;code&gt;rustup&lt;/code&gt;&lt;/a&gt;
from the appropriate page on our website, and check out the
&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1621-2022-07-19&quot;&gt;detailed release notes for 1.62.1&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#whats-in-1621-stable&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;whats-in-1621-stable&quot;&gt;&lt;/a&gt;What&#x27;s in 1.62.1 stable&lt;/h2&gt;
&lt;p&gt;Rust 1.62.1 addresses a few recent regressions in the compiler and standard
library, and also mitigates a CPU vulnerability on Intel SGX.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/98608&quot;&gt;The compiler fixed unsound function coercions involving &lt;code&gt;impl Trait&lt;/code&gt; return types.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/98890&quot;&gt;The compiler fixed an incremental compilation bug with &lt;code&gt;async fn&lt;/code&gt; lifetimes.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/98950&quot;&gt;Windows added a fallback for overlapped I/O in synchronous reads and writes.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/98126&quot;&gt;The &lt;code&gt;x86_64-fortanix-unknown-sgx&lt;/code&gt; target added a mitigation for the
MMIO stale data vulnerability&lt;/a&gt;, advisory &lt;a href&#x3D;&quot;https://www.intel.com/content/www/us/en/security-center/advisory/intel-sa-00615.html&quot;&gt;INTEL-SA-00615&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#contributors-to-1621&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;contributors-to-1621&quot;&gt;&lt;/a&gt;Contributors to 1.62.1&lt;/h3&gt;
&lt;p&gt;Many people came together to create Rust 1.62.1. We couldn&#x27;t have done it
without all of you. &lt;a href&#x3D;&quot;https://thanks.rust-lang.org/rust/1.62.1/&quot;&gt;Thanks!&lt;/a&gt;&lt;/p&gt;
</content>

        <author>
            <name>The Rust Release Team</name>
        </author>
    </entry>
    
    <entry>
        <title>Changes in the Core Team</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2022/07/12/changes-in-the-core-team.html" type="text/html" title="Changes in the Core Team" />
        <published>2022-07-12T00:00:00+00:00</published>
        <updated>2022-07-12T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2022/07/12/changes-in-the-core-team.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2022/07/12/changes-in-the-core-team.html">&lt;p&gt;We want to say farewell and thanks to a couple of people who are stepping back from the Core Team:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Aidan Hobson Sayers is leaving the Core Team and other roles. Joining the Core Team in 2018, he started out on the project with fixing CI issues and has been a member of the Infrastructure Team since its inception (moving through lead and co-lead). Aidan wants to dedicate more time to working with the Rust community and growing Rust usage at his company, and is looking forward to doing so from the other side of the fence.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ashley Williams will be stepping down from the Core Team and other roles. She became a member of the Core Team in 2018 and has had impact on many parts of the project, from leading the Community team, to setting up PagerDuty for Infrastructure and Crates.io, to the Wasm working group, to Increasing Rust’s Reach and Rustbridge, to her instrumental work creating the Rust Foundation and serving as its first Executive Director. Ashley is leaving her role in the project to focus on her newly founded company.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Many thanks to both of them for their contributions and we look forward to seeing their future efforts with Rust!&lt;/p&gt;
</content>

        <author>
            <name>The Rust Core Team</name>
        </author>
    </entry>
    
    <entry>
        <title>Announcing Rustup 1.25.1</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2022/07/12/Rustup-1.25.1.html" type="text/html" title="Announcing Rustup 1.25.1" />
        <published>2022-07-12T00:00:00+00:00</published>
        <updated>2022-07-12T00:00:01+00:00</updated>
        <id>https://blog.rust-lang.org/2022/07/12/Rustup-1.25.1.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2022/07/12/Rustup-1.25.1.html">&lt;p&gt;The rustup working group is announcing the release of rustup version 1.25.1.
&lt;a href&#x3D;&quot;https://rustup.rs&quot;&gt;Rustup&lt;/a&gt; is the recommended tool to install &lt;a href&#x3D;&quot;https://www.rust-lang.org&quot;&gt;Rust&lt;/a&gt;, a
programming language that is empowering everyone to build reliable and
efficient software.&lt;/p&gt;
&lt;p&gt;If you have a previous version of rustup installed, getting rustup 1.25.1 is as
easy as stopping any programs which may be using Rustup (e.g. closing your IDE)
and running:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rustup self update
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Rustup will also automatically update itself at the end of a normal toolchain
update:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rustup update
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you don&#x27;t have it already, you can &lt;a href&#x3D;&quot;https://rustup.rs&quot;&gt;get rustup&lt;/a&gt; from the
appropriate page on our website.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#whats-new-in-rustup-1251&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;whats-new-in-rustup-1251&quot;&gt;&lt;/a&gt;What&#x27;s new in rustup 1.25.1&lt;/h2&gt;
&lt;p&gt;This version of rustup fixes a regression introduced in the previous release
(1.25.0), which caused some workflows to fail.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#regression-in-nested-cargo-invocations-with-different-toolchains&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;regression-in-nested-cargo-invocations-with-different-toolchains&quot;&gt;&lt;/a&gt;Regression in nested Cargo invocations with different toolchains&lt;/h3&gt;
&lt;p&gt;When you invoke Rust or Cargo installed by rustup, you&#x27;re not running them
directly. Instead, you run &lt;a href&#x3D;&quot;https://rust-lang.github.io/rustup/concepts/proxies.html&quot;&gt;rustup &amp;quot;proxy&amp;quot; binaries&lt;/a&gt;, whose job is to
detect the right toolchain (parsing the &lt;code&gt;+channel&lt;/code&gt; CLI argument or using one of
the defaults) and run it.&lt;/p&gt;
&lt;p&gt;Running these proxies is not instantaneous though, and for example a &lt;code&gt;cargo build&lt;/code&gt; invocation might execute several of them (the initial &lt;code&gt;cargo&lt;/code&gt; invocation
plus one &lt;code&gt;rustc&lt;/code&gt; for every dependency), slowing down the build.&lt;/p&gt;
&lt;p&gt;To improve performance, rustup 1.25.0 changed the proxies code to set the
&lt;a href&#x3D;&quot;https://doc.rust-lang.org/cargo/reference/environment-variables.html#environment-variables-cargo-reads&quot;&gt;&lt;code&gt;RUSTC&lt;/code&gt; and &lt;code&gt;RUSTDOC&lt;/code&gt; environment variables&lt;/a&gt; when missing, which
instructed Cargo to skip the proxies and invoke the binaries defined in those
variables directly. This provided a performance gain when building crates with
lots of dependencies.&lt;/p&gt;
&lt;p&gt;Unfortunately this change broke some users of rustup, who did something like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The first Cargo invocation (for example an extension, an alias or an
integration test) uses toolchain &lt;code&gt;foo&lt;/code&gt;, setting the &lt;code&gt;RUSTC&lt;/code&gt; and &lt;code&gt;RUSTDOC&lt;/code&gt;
environment variables pointing to that toolchain.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The first invocation calls Cargo again, but this time using toolchain &lt;code&gt;bar&lt;/code&gt;
(for example &lt;code&gt;cargo +bar build&lt;/code&gt;). This does &lt;strong&gt;not&lt;/strong&gt; set the &lt;code&gt;RUSTC&lt;/code&gt; and
&lt;code&gt;RUSTDOC&lt;/code&gt; environment variables pointing to &lt;code&gt;bar&lt;/code&gt;, as those variables are
already present.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The second invocation of Cargo then invokes rustc by using the &lt;code&gt;RUSTC&lt;/code&gt;
environment variable and skipping the proxy, which results in the &lt;code&gt;foo&lt;/code&gt;
toolchain being invoked. Previous versions of rustup invoked the proxy
instead, which would correctly detect and use the &lt;code&gt;bar&lt;/code&gt; toolchain.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Rustup 1.25.1 fixes this regression by reverting the change. The rustup working
group is discussing in &lt;a href&#x3D;&quot;https://github.com/rust-lang/rustup/issues/3035&quot;&gt;issue #3035&lt;/a&gt; plans to re-introduce the change in
a future release while avoiding breakage.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#thanks&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;thanks&quot;&gt;&lt;/a&gt;Thanks&lt;/h2&gt;
&lt;p&gt;Thanks again to all the contributors who made rustup 1.25.1 possible!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Daniel Silverstone (kinnison)&lt;/li&gt;
&lt;li&gt;Robert Collins (rbtcollins)&lt;/li&gt;
&lt;li&gt;Joshua Nelson (jyn514)&lt;/li&gt;
&lt;li&gt;Pietro Albini (pietroalbini)&lt;/li&gt;
&lt;/ul&gt;
</content>

        <author>
            <name>The Rustup Working Group</name>
        </author>
    </entry>
    
    <entry>
        <title>Announcing Rustup 1.25.0</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2022/07/11/Rustup-1.25.0.html" type="text/html" title="Announcing Rustup 1.25.0" />
        <published>2022-07-11T00:00:00+00:00</published>
        <updated>2022-07-11T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2022/07/11/Rustup-1.25.0.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2022/07/11/Rustup-1.25.0.html">&lt;p&gt;The rustup working group is happy to announce the release of rustup version 1.25.0. &lt;a href&#x3D;&quot;https://rustup.rs&quot;&gt;Rustup&lt;/a&gt; is the recommended tool to install &lt;a href&#x3D;&quot;https://www.rust-lang.org&quot;&gt;Rust&lt;/a&gt;, a programming language that is empowering everyone to build reliable and efficient software.&lt;/p&gt;
&lt;p&gt;If you have a previous version of rustup installed, getting rustup 1.25.0 is as easy as stopping any programs which may be using Rustup (e.g. closing your IDE) and running:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rustup self update
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Rustup will also automatically update itself at the end of a normal toolchain update:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rustup update
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you don&#x27;t have it already, you can &lt;a href&#x3D;&quot;https://rustup.rs&quot;&gt;get rustup&lt;/a&gt; from the appropriate page on our website.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#whats-new-in-rustup-1250&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;whats-new-in-rustup-1250&quot;&gt;&lt;/a&gt;What&#x27;s new in rustup 1.25.0&lt;/h2&gt;
&lt;p&gt;This version of Rustup involves a significant number of internal cleanups, both in terms
of the Rustup code and its documentation. In addition to a lot of work on the codebase
itself, due to the length of time since the last release this one has a record number
of contributors and we thank you all for your efforts and time.&lt;/p&gt;
&lt;p&gt;One of the biggest changes in 1.25.0 is the new offer on Windows installs to auto-install
the Visual Studio 2022 compilers which should simplify the process of getting started for
people not used to developing on Windows with the MSVC-compatible toolchains.&lt;/p&gt;
&lt;p&gt;A second important change for 1.25.0 is a number of PRs focussed around startup performance
for Rustup. While it may not seem all that important to many, Rustup&#x27;s startup time is
a factor in the time it takes to do builds which involve large numbers of crates on systems
which do not have large numbers of CPU cores. Hopefully the people for whom this is a common
activity will notice an improvement; though there&#x27;s more opportunity to speed things up still available.&lt;/p&gt;
&lt;p&gt;Some, but by no means all, of the rest of this release&#x27;s highlights includes support for
&lt;code&gt;rustup default none&lt;/code&gt; to unset the default toolchain, support for Windows arm64, inclusion
of &lt;code&gt;rust-gdbgui&lt;/code&gt; as a proxy so that platforms which support it can use GDB&#x27;s gui mode with Rust,
and some improvements to &lt;code&gt;rustup-init.sh&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Full details are available in the &lt;a href&#x3D;&quot;https://github.com/rust-lang/rustup/blob/stable/CHANGELOG.md&quot;&gt;changelog&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Rustup&#x27;s documentation is also available in &lt;a href&#x3D;&quot;https://rust-lang.github.io/rustup/&quot;&gt;the rustup book&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#thanks&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;thanks&quot;&gt;&lt;/a&gt;Thanks&lt;/h2&gt;
&lt;p&gt;Thanks again to all the contributors who made rustup 1.25.0 possible!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;二手掉包工程师 (hi-rustin)&lt;/li&gt;
&lt;li&gt;Brian Bowman (Seeker14491)&lt;/li&gt;
&lt;li&gt;Jon Gjengset (jonho)&lt;/li&gt;
&lt;li&gt;pierwill&lt;/li&gt;
&lt;li&gt;Daniel Silverstone (kinnison)&lt;/li&gt;
&lt;li&gt;Robert Collins (rbtcollins)&lt;/li&gt;
&lt;li&gt;Alan Somers (asomers)&lt;/li&gt;
&lt;li&gt;Brennan Vincent (umanwizard)&lt;/li&gt;
&lt;li&gt;Joshua Nelson (jyn514)&lt;/li&gt;
&lt;li&gt;Eric Huss (ehuss)&lt;/li&gt;
&lt;li&gt;Will Bush (willbush)&lt;/li&gt;
&lt;li&gt;Thad Guidry (thadguidry)&lt;/li&gt;
&lt;li&gt;Alexander Lovchin (alovchin91)&lt;/li&gt;
&lt;li&gt;zoodirector&lt;/li&gt;
&lt;li&gt;Takayuki Nakata (giraffate)&lt;/li&gt;
&lt;li&gt;Yusuke Abe (chansuke)&lt;/li&gt;
&lt;li&gt;Wyatt Carss (wcarss)&lt;/li&gt;
&lt;li&gt;Sondre Aasemoen (sondr3)&lt;/li&gt;
&lt;li&gt;facklambda&lt;/li&gt;
&lt;li&gt;Chad Dougherty (crd477)&lt;/li&gt;
&lt;li&gt;Noritada Kobayashi (noritada)&lt;/li&gt;
&lt;li&gt;Milan (mdaverde)&lt;/li&gt;
&lt;li&gt;Pat Sier (pjsier)&lt;/li&gt;
&lt;li&gt;Matt Keeter (mkeeter)&lt;/li&gt;
&lt;li&gt;Alex Macleod (alexendoo)&lt;/li&gt;
&lt;li&gt;Sathwik Matsa (sathwikmatsa)&lt;/li&gt;
&lt;li&gt;Kushal Das (kushaldas)&lt;/li&gt;
&lt;li&gt;Justus Winter (teythoon)&lt;/li&gt;
&lt;li&gt;k900&lt;/li&gt;
&lt;li&gt;Nicolas Ambram (nico-abram)&lt;/li&gt;
&lt;li&gt;Connor Slade (basicprogrammer10)&lt;/li&gt;
&lt;li&gt;Yerkebulan Tulibergenov (yerke)&lt;/li&gt;
&lt;li&gt;Caleb Cartwright (calebcartwright)&lt;/li&gt;
&lt;li&gt;Matthias Beyer (matthiasbeyer)&lt;/li&gt;
&lt;li&gt;spacemaniac&lt;/li&gt;
&lt;li&gt;Alex Touchet (atouchet)&lt;/li&gt;
&lt;li&gt;Guillaume Gomez (guillaumegomez)&lt;/li&gt;
&lt;li&gt;Chris Denton (chrisdenton)&lt;/li&gt;
&lt;li&gt;Thomas Orozco (krallin)&lt;/li&gt;
&lt;li&gt;cui fliter (cuishuang)&lt;/li&gt;
&lt;li&gt;Martin Nordholts (enselic)&lt;/li&gt;
&lt;li&gt;Emil Gardström (emilgardis)&lt;/li&gt;
&lt;li&gt;Arlo Siemsen (arlosi)&lt;/li&gt;
&lt;/ul&gt;
</content>

        <author>
            <name>The Rustup Working Group</name>
        </author>
    </entry>
    
    <entry>
        <title>RLS Deprecation</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2022/07/01/RLS-deprecation.html" type="text/html" title="RLS Deprecation" />
        <published>2022-07-01T00:00:00+00:00</published>
        <updated>2022-07-01T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2022/07/01/RLS-deprecation.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2022/07/01/RLS-deprecation.html">&lt;p&gt;The Rust Language Server (RLS) is being deprecated in favor of &lt;a href&#x3D;&quot;https://rust-analyzer.github.io/&quot;&gt;rust-analyzer&lt;/a&gt;.
Current users of RLS should migrate to using rust-analyzer instead.
Builds of RLS will continue to be released until at least the Rust 1.64 release (2022-09-22), after which no new releases will be made.
This timeline may change if any issues arise.&lt;/p&gt;
&lt;p&gt;RLS is an implementation of the &lt;a href&#x3D;&quot;https://microsoft.github.io/language-server-protocol/&quot;&gt;Language Server Protocol&lt;/a&gt; (LSP) which provides enhanced features with any editor that supports the protocol, such as code-checking and refactoring.
RLS was introduced by &lt;a href&#x3D;&quot;https://rust-lang.github.io/rfcs/1317-ide.html&quot;&gt;RFC 1317&lt;/a&gt; and development was very active from 2016 through 2019.
However, the architecture of RLS has several limitations that can make it difficult to provide low-latency and high-quality responses needed for an interactive environment.&lt;/p&gt;
&lt;p&gt;Development of rust-analyzer began near the beginning of 2018 to provide an alternate LSP implementation for Rust.
rust-analyzer uses a fundamentally different approach that does not rely on using &lt;code&gt;rustc&lt;/code&gt;.
In &lt;a href&#x3D;&quot;https://rust-lang.github.io/rfcs/2912-rust-analyzer.html&quot;&gt;RFC 2912&lt;/a&gt; rust-analyzer was adopted as the official replacement for RLS.&lt;/p&gt;
&lt;p&gt;How you migrate to rust-analyzer will depend on which editor you are using.
If you are using VSCode, you should uninstall the &lt;code&gt;rust-lang.rust&lt;/code&gt; extension and install the official &lt;a href&#x3D;&quot;https://marketplace.visualstudio.com/items?itemName&#x3D;rust-lang.rust-analyzer&quot;&gt;&lt;code&gt;rust-lang.rust-analyzer&lt;/code&gt; extension&lt;/a&gt;.
For other editors, please consult the &lt;a href&#x3D;&quot;https://rust-analyzer.github.io/manual.html&quot;&gt;rust-analyzer manual&lt;/a&gt; for instructions on how to install it.&lt;/p&gt;
&lt;p&gt;Should you have any issues migrating to rust-analyzer, the &lt;a href&#x3D;&quot;https://users.rust-lang.org/c/ide/14&quot;&gt;Editors and IDEs category&lt;/a&gt; on the Rust Users forum is available for help with installation and usage.&lt;/p&gt;
&lt;p&gt;We will soon be marking the official &lt;code&gt;rust-lang.rust&lt;/code&gt; VSCode extension as deprecated, and will be implementing notifications that will inform users about the transition.
After the end of release builds of RLS, we plan to replace the &lt;code&gt;rls&lt;/code&gt; executable in official Rust releases with a small LSP implementation that informs the user that RLS is no longer available.&lt;/p&gt;
&lt;p&gt;We would like to thank everyone who has worked on RLS and rust-analyzer.
These options would not exist without the tremendous effort of all the contributors to these projects.&lt;/p&gt;
</content>

        <author>
            <name>The Rust Dev Tools Team</name>
        </author>
    </entry>
    
    <entry>
        <title>Announcing Rust 1.62.0</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2022/06/30/Rust-1.62.0.html" type="text/html" title="Announcing Rust 1.62.0" />
        <published>2022-06-30T00:00:00+00:00</published>
        <updated>2022-06-30T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2022/06/30/Rust-1.62.0.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2022/06/30/Rust-1.62.0.html">&lt;p&gt;The Rust team is happy to announce a new version of Rust, 1.62.0. Rust is a programming language
empowering everyone to build reliable and efficient software.&lt;/p&gt;
&lt;p&gt;If you have a previous version of Rust installed via rustup, you can get 1.62.0 with:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-console&quot;&gt;rustup update stable
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you don&#x27;t have it already, you can &lt;a href&#x3D;&quot;https://www.rust-lang.org/install.html&quot;&gt;get &lt;code&gt;rustup&lt;/code&gt;&lt;/a&gt;
from the appropriate page on our website, and check out the
&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1620-2022-06-30&quot;&gt;detailed release notes for 1.62.0&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;p&gt;If you&#x27;d like to help us out by testing future releases, you might consider updating locally to use
the beta channel (&lt;code&gt;rustup default beta&lt;/code&gt;) or the nightly channel (&lt;code&gt;rustup default nightly&lt;/code&gt;).
Please &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/new/choose&quot;&gt;report&lt;/a&gt; any bugs you might come across!&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#whats-in-1620-stable&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;whats-in-1620-stable&quot;&gt;&lt;/a&gt;What&#x27;s in 1.62.0 stable&lt;/h2&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#cargo-add&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;cargo-add&quot;&gt;&lt;/a&gt;&lt;code&gt;cargo add&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;You can now add new dependencies directly from the command line using &lt;code&gt;cargo add&lt;/code&gt;. This command supports specifying features and versions. It can also be used to modify existing dependencies.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-text&quot;&gt;cargo add log
cargo add serde --features derive
cargo add nom@5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;See the &lt;a href&#x3D;&quot;https://doc.rust-lang.org/nightly/cargo/commands/cargo-add.html&quot;&gt;cargo documentation&lt;/a&gt; for more.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#default-enum-variants&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;default-enum-variants&quot;&gt;&lt;/a&gt;&lt;code&gt;#[default]&lt;/code&gt; enum variants&lt;/h3&gt;
&lt;p&gt;You can now use &lt;code&gt;#[derive(Default)]&lt;/code&gt; on enums if you specify a default variant. For example, until now you would have to manually write a &lt;code&gt;Default&lt;/code&gt; impl for this enum:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-rust&quot;&gt;#[derive(Default)]
enum Maybe&amp;lt;T&amp;gt; {
    #[default]
    Nothing,

    Something(T),
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As of now only &amp;quot;unit&amp;quot; variants (variants that have no fields) are allowed to be marked &lt;code&gt;#[default]&lt;/code&gt;. More information is available in the &lt;a href&#x3D;&quot;https://rust-lang.github.io/rfcs/3107-derive-default-enum.html&quot;&gt;RFC&lt;/a&gt; for this feature.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#thinner-faster-mutexes-on-linux&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;thinner-faster-mutexes-on-linux&quot;&gt;&lt;/a&gt;Thinner, faster mutexes on Linux&lt;/h3&gt;
&lt;p&gt;Previously, &lt;code&gt;Mutex&lt;/code&gt;, &lt;code&gt;Condvar&lt;/code&gt;, and &lt;code&gt;RwLock&lt;/code&gt; were backed by the pthreads library on Linux. The pthreads locks support more features than the Rust APIs themselves do, including runtime configuration, and are designed to be used in languages with fewer static guarantees than Rust provides.&lt;/p&gt;
&lt;p&gt;The mutex implementation, for example, is 40 bytes and cannot be moved. This forced the standard library to allocate a &lt;code&gt;Box&lt;/code&gt; behind the scenes for each new mutex for platforms that use pthreads.&lt;/p&gt;
&lt;p&gt;Rust&#x27;s standard library now ships with a raw futex-based implementation of these locks on Linux, which is very lightweight and doesn&#x27;t require extra allocation. In 1.62.0 &lt;code&gt;Mutex&lt;/code&gt; only needs 5 bytes for its internal state on Linux, though this may change in future versions.&lt;/p&gt;
&lt;p&gt;This is part of a long effort to improve the efficiency of Rust&#x27;s lock types, which includes previous improvements on Windows such as unboxing its primitives. You can read more about that effort in the &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/93740&quot;&gt;tracking issue&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#bare-metal-x86_64-target&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;bare-metal-x86_64-target&quot;&gt;&lt;/a&gt;Bare metal &lt;code&gt;x86_64&lt;/code&gt; target&lt;/h3&gt;
&lt;p&gt;It&#x27;s now easier to build OS-less binaries for &lt;code&gt;x86_64&lt;/code&gt;, for example when writing a kernel. The &lt;a href&#x3D;&quot;https://doc.rust-lang.org/beta/rustc/platform-support/x86_64-unknown-none.html&quot;&gt;&lt;code&gt;x86_64-unknown-none&lt;/code&gt; target&lt;/a&gt; has been promoted to &lt;a href&#x3D;&quot;https://doc.rust-lang.org/rustc/platform-support.html#tier-2&quot;&gt;Tier 2&lt;/a&gt; and can be installed with rustup.&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-console&quot;&gt;rustup target add x86_64-unknown-none
rustc --target x86_64-unknown-none my_no_std_program.rs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can read more about development using &lt;code&gt;no_std&lt;/code&gt; in the &lt;a href&#x3D;&quot;https://docs.rust-embedded.org/book/intro/no-std.html&quot;&gt;Embedded Rust book&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#stabilized-apis&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;stabilized-apis&quot;&gt;&lt;/a&gt;Stabilized APIs&lt;/h3&gt;
&lt;p&gt;The following methods and trait implementations are now stabilized:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.bool.html#method.then_some&quot;&gt;&lt;code&gt;bool::then_some&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.f32.html#method.total_cmp&quot;&gt;&lt;code&gt;f32::total_cmp&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.f64.html#method.total_cmp&quot;&gt;&lt;code&gt;f64::total_cmp&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/io/struct.Stdin.html#method.lines&quot;&gt;&lt;code&gt;Stdin::lines&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/os/windows/process/trait.CommandExt.html#tymethod.raw_arg&quot;&gt;&lt;code&gt;windows::CommandExt::raw_arg&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/panic/struct.AssertUnwindSafe.html#impl-Default&quot;&gt;&lt;code&gt;impl&amp;lt;T: Default&amp;gt; Default for AssertUnwindSafe&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/rc/struct.Rc.html#impl-From%3CRc%3Cstr%3E%3E&quot;&gt;&lt;code&gt;From&amp;lt;Rc&amp;lt;str&amp;gt;&amp;gt; for Rc&amp;lt;[u8]&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/sync/struct.Arc.html#impl-From%3CArc%3Cstr%3E%3E&quot;&gt;&lt;code&gt;From&amp;lt;Arc&amp;lt;str&amp;gt;&amp;gt; for Arc&amp;lt;[u8]&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/os/windows/ffi/struct.EncodeWide.html#impl-FusedIterator&quot;&gt;&lt;code&gt;FusedIterator for EncodeWide&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/stdarch/pull/1285&quot;&gt;RDM intrinsics on aarch64&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#other-changes&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;other-changes&quot;&gt;&lt;/a&gt;Other changes&lt;/h3&gt;
&lt;p&gt;There are other changes in the Rust 1.62.0 release. Check out what changed in
&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/blob/stable/RELEASES.md#version-1620-2022-06-30&quot;&gt;Rust&lt;/a&gt;,
&lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/blob/master/CHANGELOG.md#cargo-162-2022-06-30&quot;&gt;Cargo&lt;/a&gt;,
and &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-clippy/blob/master/CHANGELOG.md#rust-162&quot;&gt;Clippy&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#contributors-to-1620&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;contributors-to-1620&quot;&gt;&lt;/a&gt;Contributors to 1.62.0&lt;/h3&gt;
&lt;p&gt;Many people came together to create Rust 1.62.0.
We couldn&#x27;t have done it without all of you.
&lt;a href&#x3D;&quot;https://thanks.rust-lang.org/rust/1.62.0/&quot;&gt;Thanks!&lt;/a&gt;&lt;/p&gt;
</content>

        <author>
            <name>The Rust Release Team</name>
        </author>
    </entry>
    
    <entry>
        <title>Announcing The RustConf PostConf UnConf</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2022/06/28/rust-unconference.html" type="text/html" title="Announcing The RustConf PostConf UnConf" />
        <published>2022-06-28T00:00:00+00:00</published>
        <updated>2022-06-28T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2022/06/28/rust-unconference.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2022/06/28/rust-unconference.html">&lt;p&gt;Hello Rust community!&lt;/p&gt;
&lt;p&gt;We&#x27;re excited to announce that the Rust project teams will be hosting an
unconference&lt;sup class&#x3D;&quot;footnote-ref&quot;&gt;&lt;a href&#x3D;&quot;#fn1&quot; id&#x3D;&quot;fnref1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; the day after &lt;a href&#x3D;&quot;https://rustconf.com&quot;&gt;RustConf&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src&#x3D;&quot;../../../images/2022-06-28-rust-unconference/Eventbrite_Unconf.jpg&quot; alt&#x3D;&quot;RustConf PostConf UnConf promo image&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The PostConf Unconf will be dedicated to the Rust project and will be a
fantastic opportunity for users, contributors, and maintainers to network and
discuss the project&#x27;s development.&lt;/p&gt;
&lt;p&gt;There will be no set agenda; instead, attendees will decide what will be
discussed together and can move freely between sessions to find ones in which
they can contribute most effectively based on their individual interests and
needs.&lt;/p&gt;
&lt;p&gt;To get the most out of the unconference, jot down your thoughts ahead of time
and bring them ready to share. We will also set up a channel in the RustConf
Discord for folks to communicate and make preliminary, informal plans.&lt;/p&gt;
&lt;p&gt;If you plan to attend, please register as soon as possible to help us plan
appropriately. If we run out of space, project participants will be given preference.
Registration is free and open to everyone attending RustConf.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href&#x3D;&quot;https://www.eventbrite.com/e/rustconf-postconf-unconf-registration-373057423797&quot;&gt;🚨Register Now!🚨&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We hope to see you there!&lt;/p&gt;
&lt;section class&#x3D;&quot;footnotes&quot;&gt;
&lt;ol&gt;
&lt;li id&#x3D;&quot;fn1&quot;&gt;
&lt;p&gt;If you are unfamiliar with the notion of an unconference, you may find &lt;a href&#x3D;&quot;https://universityinnovation.org/wiki/Resource:How_to_organize_an_unconference&quot;&gt;this informational piece helpful&lt;/a&gt;. &lt;a href&#x3D;&quot;#fnref1&quot; class&#x3D;&quot;footnote-backref&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>

        <author>
            <name>Jane Lusby, on behalf of The Rust Project Teams</name>
        </author>
    </entry>
    
    <entry>
        <title>Call for testing: Cargo sparse-registry</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2022/06/22/sparse-registry-testing.html" type="text/html" title="Call for testing: Cargo sparse-registry" />
        <published>2022-06-22T00:00:00+00:00</published>
        <updated>2022-06-22T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2022/06/22/sparse-registry-testing.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2022/06/22/sparse-registry-testing.html">&lt;p&gt;The Cargo nightly &lt;a href&#x3D;&quot;https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#sparse-registry&quot;&gt;&lt;code&gt;sparse-registry&lt;/code&gt;&lt;/a&gt; feature is ready for testing. The
feature causes Cargo to access the crates.io index over HTTP, rather than git. It can
provide a significant performance improvement, especially if the local copy of
the git index is out-of-date or not yet cloned.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#overview&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;overview&quot;&gt;&lt;/a&gt;Overview&lt;/h2&gt;
&lt;p&gt;To try it out, add the &lt;code&gt;-Z sparse-registry&lt;/code&gt; flag on a recent nightly build of Cargo.
For example, to update dependencies:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rustup update nightly
cargo +nightly -Z sparse-registry update
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The feature can also be enabled by setting the environment variable
&lt;code&gt;CARGO_UNSTABLE_SPARSE_REGISTRY&#x3D;true&lt;/code&gt;. Setting this variable will have no effect on stable
Cargo, making it easy to opt-in for CI jobs.&lt;/p&gt;
&lt;p&gt;The minimum Cargo version is &lt;code&gt;cargo 2022-06-17&lt;/code&gt;, which is bundled with &lt;code&gt;rustc 2022-06-20&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can &lt;a href&#x3D;&quot;https://internals.rust-lang.org/t/call-for-testing-cargo-sparse-registry/16862&quot;&gt;leave feedback on the internals thread&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you see any issues &lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/issues&quot;&gt;please report them on the Cargo repo&lt;/a&gt;. The output of Cargo
with the environment variable &lt;code&gt;CARGO_LOG&#x3D;cargo::sources::registry::http_remote&#x3D;trace&lt;/code&gt; set
will be helpful in debugging.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#details&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;details&quot;&gt;&lt;/a&gt;Details&lt;/h2&gt;
&lt;p&gt;Accessing the index over HTTP allows crates.io to continue growing without hampering
performance. The current git index continues to grow as new crates are published,
and clients must download the entire index. The HTTP index only requires downloading
metadata for crates in your dependency tree.&lt;/p&gt;
&lt;p&gt;The performance improvement for clients should be especially noticeable in CI
environments, particularly if no local cache of the index exists.&lt;/p&gt;
&lt;p&gt;On the server side, the HTTP protocol is much simpler to cache on a CDN, which improves
scalability and reduces server load. Due to this caching, crate updates may take an
extra minute to appear in the index.&lt;/p&gt;
&lt;p&gt;The Cargo team plans to eventually make this the default way to access crates.io
(though the git index will remain for compatibility with older versions of Cargo and
external tools). &lt;code&gt;Cargo.lock&lt;/code&gt; files will continue to reference the existing crates.io
index on GitHub to avoid churn.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;-Z sparse-registry&lt;/code&gt; flag also enables alternative registries to be accessed over
HTTP. For more details, see the &lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/issues/9069&quot;&gt;tracking issue&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#thank-you&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;thank-you&quot;&gt;&lt;/a&gt;Thank you&lt;/h2&gt;
&lt;p&gt;This project has been in the works for over 2.5 years with collaboration from the crates.io,
infra, and Cargo teams.&lt;/p&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/kornelski&quot;&gt;@kornelski&lt;/a&gt; wrote the &lt;a href&#x3D;&quot;https://rust-lang.github.io/rfcs/2789-sparse-index.html&quot;&gt;sparse-index RFC&lt;/a&gt; and initial
performance proof of concept. &lt;a href&#x3D;&quot;https://github.com/jonhoo&quot;&gt;@jonhoo&lt;/a&gt; created the initial
implementation in Cargo and gathered performance data. &lt;a href&#x3D;&quot;https://github.com/arlosi&quot;&gt;@arlosi&lt;/a&gt;
completed the implementation in Cargo and implemented the changes to crates.io to serve the
index. &lt;a href&#x3D;&quot;https://github.com/eh2406&quot;&gt;@eh2406&lt;/a&gt; provided numerous reviews and feedback to get
all the changes landed. Many others from the community helped by providing suggestions,
feedback, and testing.&lt;/p&gt;
&lt;p&gt;Thank you to everyone involved!&lt;/p&gt;
</content>

        <author>
            <name>Arlo Siemsen</name>
        </author>
    </entry>
    
</feed>
